// Copyright (c) 2024 Robert Hildebrandt. All rights reserved.
// >> AUTOGENERATED!!! << NO NOT MODIFY! >> Modifications will be overwritten!!
// ==== usize ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_eq(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x == y;
void assert_usize_eq(usize x, usize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_ne(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x != y;
void assert_usize_ne(usize x, usize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_lt(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x < y;
void assert_usize_lt(usize x, usize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_lte(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x <= y;
void assert_usize_lte(usize x, usize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_gt(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x > y;
void assert_usize_gt(usize x, usize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_usize_gte(usize x, usize y);
//@ terminates true; assigns \nothing; exits false; ensures x >= y;
void assert_usize_gte(usize x, usize y);

void debug_assert_usize_lte_lte(usize x, usize y, usize z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y <= z;
void assert_usize_lte_lte(usize x, usize y, usize z);
void debug_assert_usize_lte_lt(usize x, usize y, usize z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y < z;
void assert_usize_lte_lt(usize x, usize y, usize z);

// ==== ssize ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_eq(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x == y;
void assert_ssize_eq(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_ne(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x != y;
void assert_ssize_ne(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_lt(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x < y;
void assert_ssize_lt(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_lte(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x <= y;
void assert_ssize_lte(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_gt(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x > y;
void assert_ssize_gt(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ssize_gte(ssize x, ssize y);
//@ terminates true; assigns \nothing; exits false; ensures x >= y;
void assert_ssize_gte(ssize x, ssize y);

void debug_assert_ssize_lte_lte(ssize x, ssize y, ssize z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y <= z;
void assert_ssize_lte_lte(ssize x, ssize y, ssize z);
void debug_assert_ssize_lte_lt(ssize x, ssize y, ssize z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y < z;
void assert_ssize_lte_lt(ssize x, ssize y, ssize z);

// ==== int ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_eq(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x == y;
void assert_int_eq(int x, int y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_ne(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x != y;
void assert_int_ne(int x, int y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_lt(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x < y;
void assert_int_lt(int x, int y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_lte(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x <= y;
void assert_int_lte(int x, int y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_gt(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x > y;
void assert_int_gt(int x, int y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_int_gte(int x, int y);
//@ terminates true; assigns \nothing; exits false; ensures x >= y;
void assert_int_gte(int x, int y);

// ==== ptr ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_eq(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x == y;
void assert_ptr_eq(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_ne(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x != y;
void assert_ptr_ne(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_lt(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x < y;
void assert_ptr_lt(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_lte(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x <= y;
void assert_ptr_lte(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_gt(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x > y;
void assert_ptr_gt(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false;
void debug_assert_ptr_gte(const void* x, const void* y);
//@ terminates true; assigns \nothing; exits false; ensures x >= y;
void assert_ptr_gte(const void* x, const void* y);

void debug_assert_ptr_lte_lte(const void* x, const void* y, const void* z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y <= z;
void assert_ptr_lte_lte(const void* x, const void* y, const void* z);
void debug_assert_ptr_lte_lt(const void* x, const void* y, const void* z);
//@ terminates true; assigns \nothing; exits false; ensures x <= y < z;
void assert_ptr_lte_lt(const void* x, const void* y, const void* z);

// ==== cstr_eq ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_cstr_eq(const char* x, const char* y);
//@ terminates true; assigns \nothing; exits false;
void assert_cstr_eq(const char* x, const char* y);

// ==== bool_eq ====
//@ terminates true; assigns \nothing; exits false;
void debug_assert_bool_eq(bool x, bool y);
//@ terminates true; assigns \nothing; exits false; ensures x == y;
void assert_bool_eq(bool x, bool y);

#ifdef __FRAMAC__
// ==== usize ====
#define debug_assert_usize_eq(x, y)
#define debug_assert_usize_ne(x, y)
#define debug_assert_usize_lt(x, y)
#define debug_assert_usize_lte(x, y)
#define debug_assert_usize_gt(x, y)
#define debug_assert_usize_gte(x, y)

#define debug_assert_usize_lte_lte(x, y, z)
#define debug_assert_usize_lte_lt(x, y, z)

// ==== ssize ====
#define debug_assert_ssize_eq(x, y)
#define debug_assert_ssize_ne(x, y)
#define debug_assert_ssize_lt(x, y)
#define debug_assert_ssize_lte(x, y)
#define debug_assert_ssize_gt(x, y)
#define debug_assert_ssize_gte(x, y)

#define debug_assert_ssize_lte_lte(x, y, z)
#define debug_assert_ssize_lte_lt(x, y, z)

// ==== int ====
#define debug_assert_int_eq(x, y)
#define debug_assert_int_ne(x, y)
#define debug_assert_int_lt(x, y)
#define debug_assert_int_lte(x, y)
#define debug_assert_int_gt(x, y)
#define debug_assert_int_gte(x, y)

// ==== ptr ====
#define debug_assert_ptr_eq(x, y)
#define debug_assert_ptr_ne(x, y)
#define debug_assert_ptr_lt(x, y)
#define debug_assert_ptr_lte(x, y)
#define debug_assert_ptr_gt(x, y)
#define debug_assert_ptr_gte(x, y)

#define debug_assert_ptr_lte_lte(x, y, z)
#define debug_assert_ptr_lte_lt(x, y, z)

// ==== cstr_eq ====
#define debug_assert_cstr_eq(x, y)

// ==== bool_eq ====
#define debug_assert_bool_eq(x, y)

#endif // __FRAMAC__
